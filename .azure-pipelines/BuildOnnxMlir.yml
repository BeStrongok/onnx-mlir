# Download Repos, build and check LLVM, build and check ONNX MLIR

parameters:
- name: BuildTools
  type: string
  default: '-G Ninja'
- name: CMakePrefixPath
  type: string
  default: ''
- name: Platform
  type: string
  default: ''

steps:
  - checkout: self
    clean: true
    submodules: recursive
  - checkout: llvm-project
    clean: true
  - task: CMake@1
    displayName: 'CMake LLVM'
    inputs:
      workingDirectory: '$(LLVMBuildDir)'
      cmakeArgs: >-
        ${{ parameters.BuildTools }}
        $(LLVMSourceDir)/llvm
        -DLLVM_ENABLE_PROJECTS=mlir
        -DLLVM_TARGETS_TO_BUILD="host;Apollo"
        -DCMAKE_BUILD_TYPE=$(CMakeBuildConfiguration)
        -DLLVM_ENABLE_ASSERTIONS=ON
        -DLLVM_ENABLE_RTTI=ON

  - task: CMake@1
    displayName: 'Build LLVM'
    inputs:
      workingDirectory: '$(LLVMBuildDir)'
      ${{ if eq(parameters.Platform, 'Windows') }}:
        cmakeArgs: '--build . --config $(CMakeBuildConfiguration) -- /m'
      ${{ if eq(parameters.Platform, 'Ubuntu') }}:
        cmakeArgs: '--build . --config $(CMakeBuildConfiguration)'

  - task: CMake@1
    displayName: 'Check LLVM'
    inputs:
      workingDirectory: '$(LLVMBuildDir)'
      ${{ if eq(parameters.Platform, 'Windows') }}:
        cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target check-mlir -- /m'
      ${{ if eq(parameters.Platform, 'Ubuntu') }}:
        cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target check-mlir'

  # Delete the current build directory. This is a temporary workaround until dependency
  # issues are resolved, although cost is low since ONNX MLIR builds quickly.
  - task: DeleteFiles@1
    displayName: 'Delete ONNX MLIR Build Directory'
    inputs:
      SourceFolder: '$(ONNXMLIRBuildDir)_$(CMakeBuildConfiguration)'
      Contents: '**/*' 
      RemoveSourceFolder: false

  - task: CMake@1
    displayName: 'CMake ONNX MLIR'
    inputs:
      workingDirectory: '$(ONNXMLIRBuildDir)_$(CMakeBuildConfiguration)'
      cmakeArgs: >-
        ${{ parameters.BuildTools }}
        $(ONNXMLIRSourceDir)
        -DADO_DOWNLOAD_ONNX_TEST_FILES=ON
        -DCMAKE_BUILD_TYPE=$(CMakeBuildConfiguration)
        -DCMAKE_PREFIX_PATH=${{ parameters.CMakePrefixPath }}
        -DONNX_USE_PROTOBUF_SHARED_LIBS=OFF
        -DProtobuf_USE_STATIC_LIBS=ON

  - task: CMake@1
    displayName: 'Build ONNX MLIR'
    inputs:
      workingDirectory: '$(ONNXMLIRBuildDir)_$(CMakeBuildConfiguration)'
      ${{ if eq(parameters.Platform, 'Windows') }}:
        cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target onnx-mlir -- /m'
      ${{ if eq(parameters.Platform, 'Ubuntu') }}:
        cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target onnx-mlir'

  - task: CMake@1
    displayName: 'Check ONNX MLIR'
    inputs:
      workingDirectory: '$(ONNXMLIRBuildDir)_$(CMakeBuildConfiguration)'
      ${{ if eq(parameters.Platform, 'Windows') }}:
        cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target check-onnx-lit -- /m'
      ${{ if eq(parameters.Platform, 'Ubuntu') }}:
        cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target check-onnx-lit'

  - task: CopyFiles@2
    displayName: 'Copy ONNX MLIR to Artifact Staging'
    inputs:
      sourceFolder: '$(ONNXMLIRBuildDir)_$(CMakeBuildConfiguration)'
      contents: |
        bin/onnx-mlir
        bin/onnx-mlir-opt
        bin/$(CMakeBuildConfiguration)/onnx-mlir.exe
        bin/$(CMakeBuildConfiguration)/onnx-mlir.pdb
        bin/$(CMakeBuildConfiguration)/onnx-mlir-opt.exe
        bin/$(CMakeBuildConfiguration)/onnx-mlir-opt.pdb
      targetFolder: '$(Build.ArtifactStagingDirectory)/onnx-mlir/bin'
      cleanTargetFolder: true
      flattenFolders: true
      preserveTimestamp: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish ONNX MLIR Artifacts'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/onnx-mlir'
      artifactName: 'ONNX_MLIR_${{ parameters.Platform }}_$(CMakeBuildConfiguration)'

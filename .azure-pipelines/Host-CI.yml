# Builds and tests onnx-mlir across platforms
# We do not leverage the current CI scripts
# 1) Build llvm and run tests
# 2) Build onnx-mlir and run tests
# 3) Test onnx-mlir

name: ONNX_MLIR_CI_$(SourceBranchName)_$(Date:yyyy.MM.dd)$(Rev:.rr)

resources:
  repositories:
  - repository: self 
  - repository: llvm-project
    type: git
    name: llvm-project/llvm-project
    ref: refs/heads/tvp

# Trigger CI and PR build on the master branch
trigger:
- apollo

# Nightly build regardless of triggers
schedules:
- cron: "0 12 * * *"
  displayName: 5:00 AM (UTC - 7) daily build
  branches:
    include:
    - apollo
  always: true

parameters:
- name: AlwaysBuildDebug
  displayName: Build Debug?
  type: boolean
  default: false

# Set up variables for jobs, used across templates
variables:
- name: LLVMSourceDir
  value: '$(Build.SourcesDirectory)/llvm-project'
- name: ONNXMLIRBuildDir
  value: '$(Build.BinariesDirectory)/build_onnx_mlir'
- name: ONNXMLIRSourceDir
  value: '$(Build.SourcesDirectory)/onnx-mlir'
# Environment variables, mostly used by Windows
- name: LLVM_PROJ_SRC
  value: $(LLVMSourceDir)
- name: LIT_OPTS
  value: '-v'
- name: CURSES_LIB_PATH
  value: $(Agent.ToolsDirectory)/PDCurses
- name: CTEST_OUTPUT_ON_FAILURE
  value: 1

jobs:
- job: Build_And_Test_ONNX_MLIR_Windows
  displayName: "Build and Test ONNX MLIR (Windows)"
  strategy:
    matrix:
      Release:
        CMakeBuildConfiguration: 'Release'
        LLVMBuildDir: '$(Build.BinariesDirectory)/build_llvm'
        LLVM_PROJ_BUILD: '$(Build.BinariesDirectory)/build_llvm'
      # Run the debug configuration for scheduled builds, CI/PR only use Release config to save VM cycles
      ${{ if or(eq(variables['Build.Reason'], 'Schedule'), eq(parameters.AlwaysBuildDebug, true)) }}:
        Debug:
          CMakeBuildConfiguration: 'Debug'
          LLVMBuildDir: '$(Build.BinariesDirectory)/build_llvm'
          LLVM_PROJ_BUILD: '$(Build.BinariesDirectory)/build_llvm'
  pool:
    name: Default
    demands:
    - Agent.OS -equals Windows_NT
  timeoutInMinutes: 180

  steps:
  - template: BuildOnnxMlir.yml
    parameters:
      CMakeBuildTarget: 'onnx-mlir -- /m'
      CMakeExternalLIT: '-DLLVM_EXTERNAL_LIT="$(LLVMBuildDir)\$(CMakeBuildConfiguration)\bin\llvm-lit.py"'
      CMakePrefixPath: '$(Agent.ToolsDirectory)\protobuf\install_$(CMakeBuildConfiguration)'
      GeneratorString: '"Visual Studio 16 2019" -A x64 -T host=x64'
      PythonExePath: '"C:/Program Files (x86)/Microsoft Visual Studio/Shared/Python36_64/python.EXE"'

- job: Build_And_Test_ONNX_MLIR_Ubuntu
  displayName: "Build and Test ONNX MLIR (Ubuntu)"
  strategy:
    matrix:
      Release:
        CMakeBuildConfiguration: 'Release'
        # For Linux split LLVM build directory. This saves time by eliminating builder trashing
        LLVMBuildDir: '$(Build.BinariesDirectory)/build_llvm_Release'
        LLVM_PROJ_BUILD: '$(Build.BinariesDirectory)/build_llvm_Release'
      # Run the debug configuration for scheduled builds, CI/PR only use Release config to save VM cycles
      ${{ if or(eq(variables['Build.Reason'], 'Schedule'), eq(parameters.AlwaysBuildDebug, true)) }}:
        Debug:
          CMakeBuildConfiguration: 'Debug'
          LLVMBuildDir: '$(Build.BinariesDirectory)/build_llvm_Debug'
          LLVM_PROJ_BUILD: '$(Build.BinariesDirectory)/build_llvm_Debug'
  pool:
    name: Default
    demands:
    - Agent.OS -equals Linux
    - CentOS -equals false
  timeoutInMinutes: 180

  steps:
  - template: BuildOnnxMlir.yml
    parameters:
      CMakeBuildTarget: 'onnx-mlir'

  # Pulled the following steps out of the template because they are currently Linux specific, until we get upstream fixes
  - script: |
      pip3 install --user -e $(ONNXMLIRSourceDir)/third_party/onnx
    displayName: 'Install ONNX Python Module'

  - task: CMake@1
    displayName: 'End-To-End Test ONNX'
    inputs:
      workingDirectory: '$(ONNXMLIRBuildDir)_$(CMakeBuildConfiguration)'
      cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target check-onnx-backend'

  - task: CMake@1
    displayName: 'Build Unit Tests'
    inputs:
      workingDirectory: '$(ONNXMLIRBuildDir)_$(CMakeBuildConfiguration)'
      cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target test/unit/all test/numerical/all test/mlir/all third_party/benchmark/test/all'

  - task: CMake@1
    displayName: 'ONNX MLIR Unit Tests'
    inputs:
      workingDirectory: '$(ONNXMLIRBuildDir)_$(CMakeBuildConfiguration)'
      cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target test'

# Builds and tests onnx-mlir across platforms
# We do not leverage the current CI scripts
# 1) Build llvm and run tests
# 2) Build onnx-mlir and run tests
# 3) Test onnx-mlir

name: ONNX_MLIR_CI_$(SourceBranchName)_$(Date:yyyy.MM.dd)$(Rev:.rr)

resources:
  repositories:
  - repository: llvm-project
    type: git
    name: llvm-project
    ref: refs/heads/tvp
    trigger: none
  - repository: tools
    type: git
    name: tools
    ref: refs/heads/main
    trigger: none
  - repository: protobuf
    type: github
    name: protocolbuffers/protobuf
    endpoint: ProtobufGitHubServiceConnection
    ref: refs/tags/v3.12.3
    trigger: none

# Trigger CI and PR build on the apollo branch
trigger:
- apollo

# Nightly build regardless of triggers
schedules:
- cron: "0 12 * * *"
  displayName: 5:00 AM (UTC - 7) daily build
  branches:
    include:
    - apollo
  always: true

parameters:
- name: AlwaysBuildDebug
  displayName: Build Debug?
  type: boolean
  default: false

# Set up variables for jobs, used across templates
variables:
# Environment variables, mostly used by Windows
- name: LIT_OPTS
  value: '-v'
- name: CTEST_OUTPUT_ON_FAILURE
  value: 1

jobs:
- job: Build_And_Test_ONNX_MLIR_Windows
  displayName: "Build and Test ONNX MLIR (Windows)"
  strategy:
    matrix:
      Release:
        CMakeBuildConfiguration: 'Release'
      # Run the debug configuration for scheduled builds, CI/PR only use Release config to save VM cycles
      ${{ if or(eq(variables['Build.Reason'], 'Schedule'), eq(parameters.AlwaysBuildDebug, true)) }}:
        Debug:
          CMakeBuildConfiguration: 'Debug'
  pool:
    name: 1ESHostedPool
    demands:
    - ImageOverride -equals MMS2019
  timeoutInMinutes: 180

  steps:
  - template: .azure-pipelines/templates/steps/ONNXMLIRBuildTemplate.yml@tools
    parameters:
      BuildConfiguration: '$(CMakeBuildConfiguration)'
      Platform: 'Windows'

- job: Build_And_Test_ONNX_MLIR_Ubuntu
  displayName: "Build and Test ONNX MLIR (Ubuntu)"
  strategy:
    matrix:
      Release:
        CMakeBuildConfiguration: 'Release'
      # Run the debug configuration for scheduled builds, CI/PR only use Release config to save VM cycles
      ${{ if or(eq(variables['Build.Reason'], 'Schedule'), eq(parameters.AlwaysBuildDebug, true)) }}:
        Debug:
          CMakeBuildConfiguration: 'Debug'
  pool:
    name: 1ESHostedPool
    demands:
    - ImageOverride -equals MMSUbuntu20.04
  timeoutInMinutes: 180

  steps:
  - template: .azure-pipelines/templates/steps/ONNXMLIRBuildTemplate.yml@tools
    parameters:
      BuildConfiguration: '$(CMakeBuildConfiguration)'
      Platform: 'Ubuntu'

  # Pulled the following steps out of the template because they are currently Linux specific, until we get upstream fixes
  - script: |
      pip3 install --user --no-use-pep517 -e $(Build.SourcesDirectory)/onnx-mlir/third_party/onnx
      pip3 install --user --no-deps onnxruntime
    displayName: 'Install ONNX Python Module'

  - task: CMake@1
    displayName: 'Check ONNX Docs'
    inputs:
      workingDirectory: '$(Build.BinariesDirectory)/onnx-mlir'
      cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target check-doc'

# ISSUE-TODO-stilis-2021/03/23: #356: Memory pool operations in onnx-mlir are broken due to algorithm changes in mlir
#  - task: CMake@1
#    displayName: 'End-To-End Test ONNX'
#    inputs:
#      workingDirectory: '$(Build.BinariesDirectory)/onnx-mlir'
#      cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target check-onnx-backend'

# ISSUE-TODO-stilis-2021/03/23: #356: Memory pool operations in onnx-mlir are broken due to algorithm changes in mlir
#  - task: CMake@1
#    displayName: 'Build Unit Tests'
#    inputs:
#      workingDirectory: '$(Build.BinariesDirectory)/onnx-mlir'
#      cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target test/unit/all test/numerical/all test/mlir/all third_party/benchmark/test/all'

# ISSUE-TODO-stilis-2021/03/23: #356: Memory pool operations in onnx-mlir are broken due to algorithm changes in mlir
#  - task: CMake@1
#    displayName: 'ONNX MLIR Unit Tests'
#    inputs:
#      workingDirectory: '$(Build.BinariesDirectory)/onnx-mlir'
#      cmakeArgs: '--build . --config $(CMakeBuildConfiguration) --target test'
